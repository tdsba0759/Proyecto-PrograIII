/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Presentacion;
// Importaciones necesarias para el funcionamiento del programa

import Seguridad.LogicaEncriptacion;
// Importa la clase `LogicaEncriptacion` del paquete `Seguridad`.
// Esta clase se utiliza para realizar operaciones de encriptación y verificación de datos sensibles, como contraseñas.

import java.io.BufferedReader;
// Importa la clase `BufferedReader`, que permite leer texto de archivos de manera eficiente, línea por línea.

import java.io.BufferedWriter;
// Importa la clase `BufferedWriter`, que permite escribir texto en archivos de manera eficiente, añadiendo contenido sin sobrescribir.

import java.io.FileReader;
// Importa la clase `FileReader`, que permite leer datos de un archivo de texto.

import java.io.FileWriter;
// Importa la clase `FileWriter`, que permite escribir datos en un archivo de texto.

import java.io.IOException;
// Importa la clase `IOException`, que se utiliza para manejar errores relacionados con la entrada/salida, como problemas al leer o escribir archivos.

import javax.swing.JOptionPane;
// Importa la clase `JOptionPane`, que se utiliza para mostrar cuadros de diálogo al usuario, como mensajes de error, advertencia o confirmación.

/**
 *
 * @author Joshua
 */
public class Credenciales extends javax.swing.JFrame {

    /**
     * Creates new form Credenciales
     */
    public Credenciales() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNumeroCuentaRegistro = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtPinRegistro = new javax.swing.JTextField();
        btnGenerar1 = new javax.swing.JButton();
        btnCerrarRegistro = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("REGISTRO DE USUARIOS");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 140, -1));

        jLabel3.setText("Numero de Cuenta");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 110, -1));

        txtNumeroCuentaRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroCuentaRegistroActionPerformed(evt);
            }
        });
        jPanel1.add(txtNumeroCuentaRegistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 120, -1));

        jLabel1.setText("Pin");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 110, -1));

        txtPinRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPinRegistroActionPerformed(evt);
            }
        });
        jPanel1.add(txtPinRegistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 120, -1));

        btnGenerar1.setText("Generar ");
        btnGenerar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerar1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnGenerar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 180, -1, -1));

        btnCerrarRegistro.setText("Cerrar");
        btnCerrarRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarRegistroActionPerformed(evt);
            }
        });
        jPanel1.add(btnCerrarRegistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 180, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

/**
 * Genera un número de cuenta único aleatorio de 5 dígitos.
 * 
 * @return Una cadena que representa el número de cuenta generado.
 */
private String generarNumeroCuenta() {
    // Math.random() genera un número decimal aleatorio entre 0.0 y 1.0.
    // Multiplicarlo por 100000 produce un rango entre 0 y 99999.
    // (int) convierte el número a un entero, descartando los decimales.
    // String.format("%05d") asegura que el número siempre tenga 5 dígitos, añadiendo ceros a la izquierda si es necesario.
    return String.format("%05d", (int)(Math.random() * 100000));
}

/**
 * Genera un PIN aleatorio de 4 dígitos.
 * 
 * @return Una cadena que representa el PIN generado.
 */
private String generarPin() {
    // Math.random() genera un número decimal aleatorio entre 0.0 y 1.0.
    // Multiplicarlo por 10000 produce un rango entre 0 y 9999.
    // (int) convierte el número a un entero, descartando los decimales.
    // String.format("%04d") asegura que el PIN siempre tenga 4 dígitos, añadiendo ceros a la izquierda si es necesario.
    return String.format("%04d", (int)(Math.random() * 10000));
}

    
    
    private void txtNumeroCuentaRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroCuentaRegistroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroCuentaRegistroActionPerformed

    private void txtPinRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPinRegistroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPinRegistroActionPerformed
    
    
    /**
 * Verifica si un número de cuenta ya existe en el archivo "usuarios.txt".
 * 
 * Este método busca en el archivo de texto cada línea, separa los valores por comas
 * y verifica si el número de cuenta proporcionado coincide con el número de cuenta
 * almacenado en el archivo.
 * 
 * @param numeroCuenta El número de cuenta a verificar.
 * @return true si el número de cuenta ya existe, false en caso contrario.
 */
private boolean cuentaExiste(String numeroCuenta) {
    // Intenta abrir el archivo "usuarios.txt" para leer su contenido
    try (BufferedReader br = new BufferedReader(new FileReader("usuarios.txt"))) {
        String linea;

        // Lee el archivo línea por línea
        while ((linea = br.readLine()) != null) {
            // Divide la línea en partes separadas por comas (formato: numeroCuenta,nombre,pinEncriptado)
            String[] partes = linea.split(",");

            // Verifica si el número de cuenta en la línea coincide con el número proporcionado
            if (partes[0].equals(numeroCuenta)) {
                return true; // Retorna true si el número de cuenta ya existe
            }
        }
    } catch (IOException e) {
        // Muestra un mensaje de error si ocurre un problema al leer el archivo
        JOptionPane.showMessageDialog(this, "Error al verificar el número de cuenta.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Retorna false si el número de cuenta no se encontró en el archivo
    return false;
}
    
    
    private void agregarUsuario(String numeroCuenta, String nombre, String pin) {
    // Verifica si el número de cuenta ya existe en el archivo
    if (cuentaExiste(numeroCuenta)) {
        // Si el número de cuenta ya existe, muestra un mensaje de error y detiene la ejecución
        JOptionPane.showMessageDialog(this, "El número de cuenta ya existe.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    try {
        // Crea una instancia de la clase LogicaEncriptacion para manejar la encriptación
        LogicaEncriptacion encriptacion = new LogicaEncriptacion();

        // Encripta el PIN proporcionado utilizando el método encriptarPin
        String pinEncriptado = encriptacion.encriptarPin(pin);

        // Formatea la información del usuario en una línea separada por comas (formato: numeroCuenta,nombre,pinEncriptado)
        String nuevaLinea = numeroCuenta + "," + nombre + "," + pinEncriptado;

        // Escribe la nueva línea en el archivo "usuarios.txt" en modo de adición (append)
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("usuarios.txt", true))) {
            writer.write(nuevaLinea); // Escribe la línea
            writer.newLine(); // Agrega un salto de línea
        }

        // Muestra un mensaje indicando que el usuario se agregó exitosamente
        JOptionPane.showMessageDialog(this, "Usuario agregado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception e) {
        // Maneja cualquier excepción que ocurra y muestra un mensaje de error con la descripción del problema
        JOptionPane.showMessageDialog(this, "Error al agregar el usuario: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    
    /**
 * Acción realizada al hacer clic en el botón "Generar".
 * 
 * Este método permite registrar un nuevo usuario, generando automáticamente un número de cuenta y un PIN único,
 * siempre que se proporcione un nombre válido. Los datos del usuario se muestran en los campos de texto y
 * se guardan en el archivo "usuarios.txt".
 * 
 * @param evt Evento que dispara esta acción (clic en el botón "Generar").
 */
    private void btnGenerar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerar1ActionPerformed
    // Pedir el nombre del usuario mediante un cuadro de diálogo
    String nombre = JOptionPane.showInputDialog(this, "Ingrese el nombre del usuario:");

    // Verificar que se haya ingresado un nombre válido
    if (nombre == null || nombre.isEmpty()) {
        // Si no se ingresa un nombre, muestra un mensaje de advertencia y detiene la ejecución
        JOptionPane.showMessageDialog(this, "El nombre es obligatorio. No se generará ninguna credencial.", "Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Generar un número de cuenta único
    String numeroCuenta;
    do {
        numeroCuenta = generarNumeroCuenta(); // Generar un número de 5 dígitos
    } while (cuentaExiste(numeroCuenta)); // Verificar que el número de cuenta no exista ya en el archivo

    // Generar un PIN único de 4 dígitos
    String pin = generarPin();

    // Mostrar el número de cuenta generado y el PIN en los campos de texto de la interfaz gráfica
    txtNumeroCuentaRegistro.setText(numeroCuenta);
    txtPinRegistro.setText(pin);

    // Llamar al método agregarUsuario para registrar al nuevo usuario en el archivo "usuarios.txt"
    agregarUsuario(numeroCuenta, nombre, pin);
    }//GEN-LAST:event_btnGenerar1ActionPerformed

    private void btnCerrarRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarRegistroActionPerformed
        // Cerrar la ventana actual
        this.dispose();

        // Abrir la ventana de login
        VentanaLogin ventanaLogin = new VentanaLogin();
        ventanaLogin.setVisible(true);
    }//GEN-LAST:event_btnCerrarRegistroActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Credenciales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Credenciales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Credenciales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Credenciales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Credenciales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCerrarRegistro;
    private javax.swing.JButton btnGenerar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtNumeroCuentaRegistro;
    private javax.swing.JTextField txtPinRegistro;
    // End of variables declaration//GEN-END:variables
}
